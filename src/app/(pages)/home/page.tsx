"use client"

import Filed from "@/app/components/filed";
import { Textarea } from "@/components/ui/textarea";
import { Fragment, useState } from "react";
import { auth } from "@/lib/firebase/client";
import { useAuthState } from "react-firebase-hooks/auth";
import { FaBox, FaChair, FaDesktop, FaLaptop } from "react-icons/fa";
import { SiSensu } from "react-icons/si";
import { RiSofaFill } from "react-icons/ri";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { BsThreeDots } from "react-icons/bs";
import { Button } from "@/components/ui/button";
import Image from "next/image";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { FiLogOut } from "react-icons/fi";
import { signOut } from "firebase/auth";
import { useRouter } from "next/navigation";
import toast, { Toaster } from "react-hot-toast";
import Link from "next/link";
import ModeSwitch from "@/components/ui/mode-switch";

export default function Page() {

    const [fieldValues, setFieldValues] = useState([
        { fieldName: "„Éú„ÉÉ„ÇØ„ÇπÂ∏≠", eName: "box", value: 0 },
        { fieldName: "„É¢„Éã„Çø„ÉºÂ∏≠", eName: "monitor", value: 0 },
        { fieldName: "PCÂ∏≠", eName: "pc", value: 0 },
        { fieldName: "Áï≥", eName: "tatami", value: 0 },
        { fieldName: "„ÇΩ„Éï„Ç°ÔºàÂ∑¶‰∏äÔºâ", eName: "sofaA", value: 0 },
        { fieldName: "„Éè„Ç§„ÉÅ„Çß„Ç¢", eName: "highchair", value: 0 },
        { fieldName: "ÂèØÂãïÂ∏≠", eName: "movable", value: 0 },
        { fieldName: "„ÇΩ„Éï„Ç°ÔºàÂè≥‰∏äÔºâ", eName: "sofaC", value: 0 },
        { fieldName: "„ÇΩ„Éï„Ç°ÔºàÂ∑¶‰∏ãÔºâ", eName: "sofaB", value: 0 },
        { fieldName: "„ÇΩ„Éï„Ç°ÔºàÂè≥‰∏ãÔºâ", eName: "sofaD", value: 0 },
        { fieldName: "Á∑®ÈõÜÔºàwinÔºâ", eName: "editorA", value: 0 },
        { fieldName: "Á∑®ÈõÜÔºàmacÔºâ", eName: "editorB", value: 0 },
        { fieldName: "ÈùôÈü≥", eName: "silent", value: 0 }
    ]);

    const [memoText, setMemoText] = useState("");

    const handleFieldValueChange = (fieldName: string, value: number | string) => {
        const updatedFieldValues = [...fieldValues];
        const index = updatedFieldValues.findIndex(
            (field) => field.fieldName === fieldName
        );

        const numericValue = Number(value); // ÂÄ§„ÇíÊòéÁ§∫ÁöÑ„Å´Êï∞ÂÄ§Âûã„Å´Â§âÊèõ

        if (index !== -1) {
            updatedFieldValues[index].value = numericValue;
        } else {
            const foundField = fieldValues.find((field) => field.fieldName === fieldName);
            if (foundField) {
                updatedFieldValues.push({ ...foundField, value: numericValue });
            }
        }

        setFieldValues(updatedFieldValues);
    };

    const router = useRouter()

    const signOutWithGoogle = async () => {
        await signOut(auth)
        router.push("/")
    }

    const sendData = async () => {
        toast.loading("ÈÄÅ‰ø°‰∏≠...");

        const baseUrl = "https://script.google.com/macros/s/AKfycbypqaKM8QC98cu3a6Ntka8xclr-_6Xi71Y0Gb2OfOeMmgKKEQ2b1oqG3EcPI-tECF0D/exec";

        const payload = {
            createdAt: new Date().toISOString(),
            contents: {
                countList: fieldValues.reduce((acc, field) => {
                    acc[field.eName] = Number(field.value); // Á¢∫ÂÆü„Å´Êï∞ÂÄ§„Å´Â§âÊèõ
                    return acc;
                }, {} as Record<string, number>),
                comment: memoText,
            },
        };

        try {
            const response = await fetch(baseUrl, {
                method: "POST",
                body: JSON.stringify(payload)
            });

            if (response.ok) {
                toast.dismiss();
                toast.success("ÈÄÅ‰ø°„Åó„Åæ„Åó„ÅüüòÉ");

                // 3ÁßíÂæå„Å´„É≠„Ç∞„Ç¢„Ç¶„Éà
                setTimeout(() => {
                    signOutWithGoogle();
                }, 3000);
            } else {
                throw new Error("Google„Éï„Ç©„Éº„É†„ÅÆÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü");
            }
        } catch {
            toast.dismiss();
            toast.error("ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åüüò≠");
        }
    };

    const [user, loading, error] = useAuthState(auth)

    if (loading) {
        return <p>„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÅÑ„Åæ„Åô</p>
    }

    if (error) {
        return <p>„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {error.message}</p>
    }

    if (!user) {
        return <p>Ë™çË®º„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
    }

    return (
        <div className="flex h-screen">
            <div className="flex-[2] xl:flex justify-between flex-col border-r hidden">
                <div>
                    <div className="flex items-center px-5 py-4 border-b gap-3">
                        <Image src="/images/logo.png" width={30} height={30} alt="logo" className="rounded-sm" />
                        <h1 className="font-bold text-[18px] relative">
                            Âà©Áî®ËÄÖÈõÜË®à„Åè„Çì
                        </h1>
                    </div>
                    <ul className="px-4 py-4 space-y-2">
                        <li>
                            <Button asChild variant="ghost">
                                <Link href="#map">ÈõÜË®à„Éû„ÉÉ„Éó</Link>
                            </Button>
                        </li>

                        <li>
                            <Button asChild variant="ghost">
                                <Link href="/analytics" target="_blank">Áµ±Ë®à</Link>
                            </Button>
                        </li>
                    </ul>
                </div>
                <div>
                    <div className="flex justify-center mb-3">
                        <ModeSwitch />
                    </div>
                    <div className="border-t flex items-center justify-between py-4 px-5">
                        <div className="flex items-center gap-3">
                            <Fragment>
                                <Avatar className="size-[30px]">
                                    <AvatarImage src={user.photoURL!} />
                                    <AvatarFallback>{user.displayName}</AvatarFallback>
                                </Avatar>
                                <p className="font-bold">{user.displayName}</p>
                            </Fragment>
                        </div>
                        <Popover>
                            <PopoverTrigger>
                                <BsThreeDots />
                            </PopoverTrigger>
                            <PopoverContent align="end" className="w-[200px] p-0">
                                <ul>
                                    <li className="px-5 py-4 flex items-center gap-3" onClick={signOutWithGoogle}>
                                        <FiLogOut />
                                        „É≠„Ç∞„Ç¢„Ç¶„Éà
                                    </li>
                                </ul>
                            </PopoverContent>
                        </Popover>
                    </div>
                </div>
            </div>
            <div className="flex-[9] xl:overflow-y-scroll h-full relative">
                <Toaster />
                {/* <div className="absolute top-5 left-10 font-bold">ver2.0.0</div> */}
                <div className="flex justify-center">
                    <div className="xl:w-[80%] w-[90%]">
                        <div className="py-[70px] border-b flex justify-center items-center lg:h-screen" id="map">
                            <div className="w-full">
                                <div className="flex justify-between mb-[15px]">
                                    <h2 className="text-left font-bold text-[25px]">ÈõÜË®à„Éû„ÉÉ„Éó</h2>
                                    <Button onClick={sendData}>ÈÄÅ‰ø°„Åô„Çã</Button>
                                </div>
                                <div>
                                    <Textarea className="resize-none h-[100px] mb-[13px] focus:outline-none" placeholder="Ê∞ó„Å•„Åç„Åå„ÅÇ„Çå„Å∞„ÄÅ„Åì„Åì„Å´„ÅäÊõ∏„Åç„Åè„Å†„Åï„ÅÑ„ÄÇ" onChange={(e) => setMemoText(e.target.value)} />
                                </div>

                                <div className="lg:grid lg:grid-cols-12 grid-rows-4 gap-4 mb-[50px] lg:space-y-0 space-y-4 ">
                                    <Filed className="col-span-3" filedName="„Éú„ÉÉ„ÇØ„ÇπÂ∏≠" onValueChange={handleFieldValueChange} maxSeats={3} icon={<FaBox />} />
                                    <Filed className="col-span-2 col-start-4" filedName="„É¢„Éã„Çø„ÉºÂ∏≠" onValueChange={handleFieldValueChange} maxSeats={1} icon={<FaDesktop />} />
                                    <Filed className="col-span-4 col-start-6" filedName="PCÂ∏≠" onValueChange={handleFieldValueChange} maxSeats={7} icon={<FaLaptop />} />
                                    <Filed className="col-span-3 col-start-10" filedName="Áï≥" onValueChange={handleFieldValueChange} maxSeats={3} icon={<SiSensu />} />
                                    <Filed className="col-span-3 row-start-2" filedName="„ÇΩ„Éï„Ç°ÔºàÂ∑¶‰∏äÔºâ" onValueChange={handleFieldValueChange} maxSeats={6} icon={<RiSofaFill />} />
                                    <Filed className="col-span-3 col-start-4 row-start-2" filedName="„Éè„Ç§„ÉÅ„Çß„Ç¢" onValueChange={handleFieldValueChange} maxSeats={8} icon={<FaChair />} />
                                    <Filed className="col-span-3 col-start-7 row-start-2" filedName="ÂèØÂãïÂ∏≠" onValueChange={handleFieldValueChange} maxSeats={11} />
                                    <Filed className="col-span-3 col-start-10 row-start-2" filedName="„ÇΩ„Éï„Ç°ÔºàÂè≥‰∏äÔºâ" onValueChange={handleFieldValueChange} maxSeats={6} icon={<RiSofaFill />} />
                                    <Filed className="col-span-3 row-start-3" filedName="„ÇΩ„Éï„Ç°ÔºàÂ∑¶‰∏ãÔºâ" onValueChange={handleFieldValueChange} maxSeats={6} icon={<RiSofaFill />} />
                                    <Filed className="col-span-3 col-start-10 row-start-3" filedName="„ÇΩ„Éï„Ç°ÔºàÂè≥‰∏ãÔºâ" onValueChange={handleFieldValueChange} maxSeats={6} icon={<RiSofaFill />} />
                                    <Filed className="col-span-2 col-start-7 row-start-4" filedName="Á∑®ÈõÜÔºàwinÔºâ" onValueChange={handleFieldValueChange} maxSeats={2} />
                                    <Filed className="col-span-2 col-start-9 row-start-4" filedName="Á∑®ÈõÜÔºàmacÔºâ" onValueChange={handleFieldValueChange} maxSeats={2} />
                                    <Filed className="col-span-2 col-start-11 row-start-4" filedName="ÈùôÈü≥" onValueChange={handleFieldValueChange} maxSeats={1} />
                                </div>


                                {/* <div className="flex items-center gap-3">
                                    <IoArrowDownCircle />„Çπ„ÇØ„É≠„Éº„É´„Åô„Çã„Å®„ÄÅ„Çµ„Ç§„Éà„ÅÆ‰Ωø„ÅÑÊñπ„ÇÑ„É°„É≥„ÉÜ„Éä„É≥„Çπ„ÇíË¶ã„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ
                                </div> */}
                            </div>
                        </div>
{/* 
                        <div className="border-b py-[70px] h-screen" id="use">
                            <h2 className="font-bold text-[25px] mb-[15px]">„Çµ„Ç§„Éà„ÅÆ‰Ωø„ÅÑÊñπ</h2>
                        </div> */}
                    </div>
                </div>
            </div>
        </div>
    )
}
